


安卓开发学习应该先学知识点再做应用还是在做应用中学习？ - 互联网 - 知乎






--------------------Link http://www.zhihu.com/question/26563105 ----------------------





--------------------Detail----------------------

学了一个月感觉知识点有点多，学着学着就不耐烦了，也不想动手打代码了，总感觉“这东西有什么用？”

-------------------------answer 0 via  -------------------------


留个坑，明天回答----------------------------差点真的就成坑了。。跑过来回答了。。先摆几个问题吧。1.应该先学知识点吗？2.不看书那应该先写代码？3.书是干什么用的？4.不看书也不先写代码难道要去山东找蓝翔吗？5.读别人的代码应该怎么读？6.读别人的Android代码应该怎么读？7.为毛要读别人的代码？8.读到什么时候能学会？---------------------------以下纯属个人见解，大神勿喷。----------------------------补充一下问答区的问题：9.java设计模式应该学好么？----------------------------1.应该先学知识点吗？个人经验表明，学编程，最开始拿一个月先学知识点或者只学知识点，基本就等于没学。于是你发现你很努力的看了一个月的书，还是什么都不会写，或者写出来了一坨bug都不知道怎么改，终于你放弃治疗了。当然，骨骼清奇的可能21天精通C++，然后妈妈再也不用担心他的编程了。人跟人的情况不一样，所以这里不是绝对的，但是我觉得对楼主的情况还是比较符合的。2.不看书那应该先写代码？你发现，你不看书，完了直接写代码又什么都不会，于是你表示要先学代码，完了你又懵了，先学代码怎么学？很多人又跑去看书了。。额，接下来发生了什么，这里参见第一条。3.书是干什么用的？我觉得书更多的时候就是参考文档，就Android来说，谁最懂Android？当然是谷歌，那么问题来了，参考文档哪家强？不找官方文档你还要去找蓝翔么？https://developer.android.com/guide/index.html至于其他的中文书，我觉得很多都夹杂了个人的见解，初学者慎入，不然很容易接触不到原汁原味的理念和思想。如果觉得英文的官方文档很蛋疼，看看翻译过来的中文版也可以。4.不看书也不先写代码难道要去山东找蓝翔吗？如果你发现你学了一个月，看了一个月的书，还是什么都不会，那接下来你要么放弃治疗，要么吃口药开始从别人的代码读起来啊。那么问题来了？别人的代码哪家强?不找官方的demo你还要去山东找蓝翔么？android.com 的页面当然以上我提到的所有界面你如果不翻墙，可能都打不开，看着一坨无法连接可能你还会有一种要去山东找蓝翔的赶脚，不过不用怕， GitHub · Build software better, together.你值得拥有。其实这里说的就是题主说的，在应用中学习，但是在应用中学习的方式也是有区别的。5.读别人的代码应该怎么读？如何读别人的代码我写过一篇自我体会的博客，如何阅读别人的代码，自知水平一般，大神就不用点了。6.读别人的Android代码应该怎么读？注意千万别上来就一个一个文件地通读，相信我，其实不用相信我你也会发现根本读不明白的。什么？读当然要读明白才有用啊？废话，你丫直接通读就能读明白了还读他干啥。其实读什么代码都先得搞明白数据的走向，具体到Android身上，他是有MVC层的。View层在Android里其实就是传说中让无数开发人员蛋疼菊紧，闻风色变的UI适配，具体讲就是res/layout/.xml那堆东西。Model跟Controller层就是.java了。这个分的不是很清楚，你可以自己作区分。说通俗点你要懂得：前端的一个数据用户输入进去，你要在后台如何获取到。你后台的一个数据，如果反馈给前端。做到这你会了点毛？你发现你毛都不会，但是这个时候其实你已经知道部分Android的文件夹之间是干什么的，之间是如何协作的。什么？你说你还是没看懂啊，在心里问自己bin文件夹里是啥？res/layout以外的文件夹是啥？大声的对自己吼一句：劳资怎么知道，我又没用到那呢。不要再问搞不明白怎么往下学了？你刚开始的时候知道res/layout是干什么的吗？那现在呢？7.为毛要读别人的代码？写代码的最终目的是执行，所以你从一个能执行的程序开始，能很快的验证自己的学习到底对不对。什么？你问我怎么验证？你改了以后他成功跑出了结果就说明你学的是对的啊。跑错了显然就是错的。别人的代码好处就在于他都写好了，虽然你毛都看不懂。但是他能顺畅地跑起来。当然，除了用了你的电脑编译器编译了下，再用了你的手机安装呈现了以下，现在这事跟你半毛钱关系都没有。但是你可以输出啊亲，这时候你必须给自己壮壮士气：“尼玛劳资虽然还不会Android，但是改个String值还是会的。” 所以你成功的将前台textView里的“A”改成了“B”。虽然你完全不知道发生了什么。但其实你已经知道数据输出到前台的最后一步是什么了。搞到这，你可以装逼点说自己已经入门了。虽然你还是不懂别人的那坨代码。但是你已经潜意识地把代码细化到了某个点上开始逐个突破了。8.读到什么时候能学会？读啊，接着读，再接下来呢？接下来就是按需学习了啊。比如你想加个按钮，你就可以搜一下Android button的东西看一看，然后发现了xml里的<button />和java里的findViewById，setOnclickListener().比如你想向用户显示一些帮助/提示.于是你发现了Toast这个玩意。什么？别人问你什么是Service，告诉他：“劳资不是不会Android，劳资压根没用到过那东西，要学的东西这么多，我现在还用不着先学他干啥。”比如你....若干个比如以后你发现，我凑，劳资当年改String值的时候怎么会觉得findViewById这个鬼函数这么难。再若干个比如以后你发现，尼玛，劳资什么时候学会的Android？-------------------------------------------------------------------以上。-------------------------------------------------------------------补充：9.java设计模式应该学好么？有人问，java设计模式应该学好么。稍微聊聊我的感受吧。首先，我也是个入坑不久的新手，纯属个人感受，欢迎参考交流指教，大神勿喷。我最开始写代码的时候，听说过一个词叫做代码风格。后来又听到了一个词叫设计模式。我当时的感受你造吗？！设计模式，虽然不知道是啥，但是好高大上的赶脚！就好像一个不懂但想学代码的家伙突然听到身边的人淡定地说了句，“你printf出来看看结果”一样，恨不得跪下来求他收我为徒吧思密达！于是跑去看了看书，于是还有模有样的学了几个设计模式，但是后来我突然有了一种感觉：这什么时候用？尼玛这又什么时候用？诶我凑这到底该什么时候用？看到最后产生了一种程序猿不适合我，要去山东蓝翔学挖掘机谋生的冲动。最终放弃了。后来？后来我开始写一些代码。后来我越来越觉得不顺手，越来越觉得自己的代码写的像一坨翔。于是我头疼如何能更好的组织代码结构的时候，我发现，尼玛MVC模式还有点意思啊。于是我头疼如何在不同的地方调用同一个类却执行不同的方法内容时，我发现，尼玛回调原来这么好用。于是我突然发现，原来设计模式还有点意思啊，劳资看来不用去山东找蓝翔了23333333.其实，我认为，没有用到的时候你是无法确认他是不是好的，就算大家都说他很好，你没用到也体会不到，既然体会不到，那你就无法确定学了它该如何正确的使用，用了有什么好处，不用会有什么后果，所以我觉得，当你发现你的代码再写下去就要成一坨翔的时候，才是该反思去学的时候。当然，这样的试错成本也是很高的。我当然也因此肉痛过。至于如何低成本的学习，额，多写代码吧。以上。最后，光收藏不点赞真的好吗？！觉得有用就点个赞吧。么么哒~


-------------------------answer 1 via  -------------------------


纸上得来终觉浅，绝知此事要躬行。


-------------------------answer 2 via  -------------------------


先去看看这篇＝。＝如何快速学习一门编程语言？ - 超大杯摩卡星冰乐的回答


-------------------------answer 3 via  -------------------------


以前我以为要把基础学好才去做项目的，后来才知道基础就是要在做项目中才能学好的。


-------------------------answer 4 via  -------------------------


少年，我看你骨骼清奇，不如来做一个知乎第三方客户端吧


-------------------------answer 5 via  -------------------------


我说说我的开发经历吧，当时我学Android第一天，写出来了一个可以为我的单反计算景深的app，都是些简单的控件，Textview什么的，我一看，我去，这么炫，自己动手就可以写出来想要的工具，现在再看这张截图。。卧槽，左边的目录结构命名都是啥啊，，这么乱后来过了一个月，又学了些基本的，想着为自己的博客 miketech.it 开发一个客户端。这是我学了一个月后做出来的第一个版本：也很简单，Viewpager，Fragment，Webview，listView，都是4.4的控件，老的ActionBar之类的之后的一年中，我为了完善这个app不断地学习新的知识，完善用户的体验：其中，我了解了Material Design，用户交互等等一些知识这一年其中我顺便还学习了下iOS开发，为博客写出了iPhone app现在主要在维护一款自己写的叫做Costuary的记账app为了这个app的云同步功能我又去学习了一点后端知识。是的，我学的时候也感觉知识有点多，和你一样，但是，我认为那些知识都能用到实际开发中的，现在看来也是那样，而且我懂得开发知识已经远远不止当时书上讲的那么多，设计模式啊，性能优化啊，界面设计啊什么的都得跟上，还得懂点推广。所以说啊，边学变写吧，比较有激情。先大概看下Android开发的知识树，懂个大概，这样开发app之前就会知道要用到什么知识。比如你想做个音乐播放app，这总得用到Service吧，现学比如你想做个通讯录，总得用到Content Provider吧，现学，我就没开发过通讯录所以我就不会content provider，不过我知道是用这个来实现的啊，到时候用到了在学也不晚。就是这样。。。开发大神们轻喷


-------------------------answer 6 via  -------------------------


0.在做应用中学习，开发是个力气活1.先实现功能再考虑茴香豆有几种写法2.写熟练再去探究原理可能会学的更快3.在项目里学，不要只做小玩具4.多参考android开源项目去做功能5.过了新手阶段再去看开发文档不迟6.别想太多，just 去做，条条大路通罗马7.以上，纯属个人建议。


-------------------------answer 7 via  -------------------------


我现在在学Android开发，谈一点个人的体会。我认为如果有一定的编程基础，一开始学习应该从应用开始，先把兴趣提起来，做一些简单的、可以把玩的小应用，这样不会出现只看知识点造成的枯燥感。当你实现了一些简单的应用后，你可能会想去做更复杂的东西，但是却无从下手，这时候就需要去补相关的知识点，然后去实现你想要的功能。总之我倾向于“在用中学”，知识点的学习应该穿插在做应用的过程中，当你为了自己想实现的功能去学习知识点的时候可能就不会感到不耐烦了～


-------------------------answer 8 via  -------------------------


1.学习知识点：先去图书馆借一本亚马逊或者豆瓣比较推荐的Android的入门书单里的中文书，虽然这本书的技术深度不能满足某部分人的要求，但是作为入门足够。附amazon搜索Android跳出来的东西：Android - 所有类别2.在应用中学习：看书有了个大概印象后可以试着自己动手实现点小应用，这样可以巩固之前学过的东西也可以积累点做Android的手感（也就是经验）。3.学习知识点：之后有了一些Android开发经验后，你可以再去看看原先翻过的书，这次你会发现第一次看的有些一知半解的知识这回能懂个大概了。4.学习知识点+应用：OK，那就可以去Google读一读官方文档（貌似某wiki有中文翻译），读一读Android大牛的blog，或者去eoe或者去github读一读别人的代码，顺便模仿着去写。这已经属于进阶阶段了。附Android大牛的blog：有哪些 Android 大牛的 blog 值得推荐？祝顺利。


-------------------------answer 9 via  -------------------------


建议学习基础（4大组件和基本运行知识）后再在项目中提升技能
