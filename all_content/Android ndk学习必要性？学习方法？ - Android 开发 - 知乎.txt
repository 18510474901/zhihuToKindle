


Android ndk学习必要性？学习方法？ - Android 开发 - 知乎






--------------------Link http://www.zhihu.com/question/36180948 ----------------------





--------------------Detail----------------------

学校开发团队队长在暑假建议我们学习ndk，具体是写一个在底层调用脚本语言lua语句的程序，记不太清，尝试失败就没有关注了。但是看见知乎上很多大牛的回答都有ndk的身影，在此想再次加深下对ndk开发的理解，寻求学习ndk的可行之道

-------------------------answer 0 via  -------------------------


如果连大头鬼Github都找不到，还是转行吧，编程不适合你。----------------------------原答案---------------------------谢邀。完全赞同 @hi大头鬼hi 的回答，这方面的想法在我之前的回答android程序员有必要学习c++吗？ - M.A.G.I 的回答 中就表达过:如果只是做个普通的Android码农，那Java够用；但如果你的理想比这个还要大一点，C++是你进阶的必备技能。说的是C++,但放到NDK上也是一样。说点题外话，出于开发成本，周期的考虑以及快速迭代的需求，这两年终端开发越来越明显的开始向大前端演进，前端的各项技术开始不断融合。前两年流行的Hybird在工程实践中被证明有非常多的问题，于是各方都在探索新方案，直到今年出现了恐怖的React Native Android.RN基于Js超强的灵活性和高代码复用，通过Java扩展App的终端能力，用NDK榨干系统的性能，我认为在一定程度上代表了终端开发未来的方向。不知道大家是不是还记得耗子和玉伯关于团队的那场讨论，在条件允许的情况下，全栈团队确实能提高生产力。特别是对于终端开发，在大前端技术融合的背景下，以后对于终端开发者的要求将会是一定意义上的通才，门槛比现在只高不低。对于开发者来说，我们需要做的是拥抱变化，不断主动拓展自己在技术上的深度和广度，而不是在这里提问，犹豫应不应该去学，没有学习能力的终端开发者，之后的道路也会更艰难。如果想了解什么是大前端开发者，可以去看一下大头鬼的Github.


-------------------------answer 1 via  -------------------------


想看frsco源码么，想看ReactNative源码么，想看framework源码么，想的话，就要学。当然不学也并不妨碍你坐开发，但是想要晋级成为高级开发，NDK必须要学习的。


-------------------------answer 2 via  -------------------------


感觉题主的ndk指的不是实际的那个ndk。NDK全称Native Development Kit，因而NDK本身主要是一套工具链。NDK里面包含了交叉编译、链接、调试等的工具，以及一些比较基本的函数库，如STL、标准C库等，一些图形的glue接口等，还有JNI的一些机制。感觉题主所称的NDK在实际的NDK之外，似乎还包含JNI机制和C/C++编程语言。JNI是一种让Java层代码和C/C++层代码可以相互调用的机制，也就是Java层代码可以调用C/C++，反过来也可以。不仅仅是Android开发可以用JNI这种机制，普通的PC机上的JAVA开发也可以用这种机制。在Android app开发中使用C/C++语言，如同其他朋友所言，能带来的好处很多，如利用遗留的相关库，访问底层操作系统接口等等。C/C++是这种开发中的核心。至于说到有没有必要，当然是具体看情况了。如果Android的Java层开发的知识的积累还非常少，当然应该先积累这方面的东西。对于许多对性能要求比较苛刻的应用领域，如其他朋友提到的音视频编解码，还有游戏的图形什么的使用NDK写一些C/C++代码可能比较好。要看别人优秀的使用了JNI机制和C/C++的开源项目，学一下一定是很有帮助的。学习方法嘛，主要是分成NDK工具、JNI和 C/C++编程语言3个部分来看。C/C++编程语言，自不必多说，和常规的 C/C++编程语言又没有什么特别的地方，主要的差别可能也就在可用的函数库等方面了。JNI的话，有一份叫 《The Java Native Interface Programmer's Guide and Specification》的文档非常好，比较清楚的讲解了Java代码如何与C/C++代码相互访问的方法。至于NDK，可以参考NDK自带的文档，或者android aosp项目中来了解如何编写Android.mk。 参考NDK自带的文档来了解如何编译，链接，调试，如何编写Application.mk，如何使用STL等。还可以搜一下如何把NDK集成进自己使用的IDE中，如Eclipse，Android Studio等等。


-------------------------answer 3 via  -------------------------


然而ndk开发却需要如此多的知识。c／c++至少熟练掌握一个吧（注意是熟练），Linux得懂吧，ndk开发涉及很多底层的调用，连Linux常用接口都没听说过，内存，进程调度都不理解，谈何ndk开发啊。这是一个相当漫长的过程啊


-------------------------answer 4 via  -------------------------


入门阶段 基本用不到ndk 也不推荐直接学  了解下基础怎么调用jni啥的等有了一定的基础 由向中高级过度时候推荐这个时候来学


-------------------------answer 5 via  -------------------------


虽然你没有完成这个任务，不过没关系，其他几个人也没完成。我个人觉得学习一下ndk是很有必要的，可以加深对Android系统本身的理解，这也是我布置这个任务的原因。=====================分割线 （以下是怀念旧事） ========================        记得大概是高二么还是高三吧，那时候我只会写C/C++，那时候喜欢玩Galgame，想用C++写一个Android平台上的Galgame引擎，有个叫做SDL的图形库，是用C写的，当初父母限制我使用电脑，我只能在我的Android平板上用一个叫做c4droid的app写代码，写着写着，自己对c4droid编译C++程序的过程就很感兴趣，于是去研究了一下，发现其实就是通过gcc和makefile来编译程序的。于是之后我在平板上装了个terminal，不用c4droid，直接在终端里用gcc的命令和写makefile来编译自己的C++程序了。后来有一次自己的程序里想要用到ffmpeg和lua，但是这两个东西c4droid可不带，只能自己编译库。于是去网上查了很长时间，都说要用一个叫做ndk的东西来编译一份安卓的so和lib。那时候我可是完全不会java和安卓开发，但是为了我自己写的C++程序，也去努力钻研了一番，最后倒是成功用ndk编译了lua。        现在大二了，回想起高中之前经历的这段过程，捣鼓ndk的这些经验使得我在接触Android应用层开发之前就对Android系统有了一定的了解，所以我认为，学习ndk开发首先可以让我们对Android系统有更深的了解。其次，一些进阶的更深的关于Android系统的东西想必也是需要学习ndk才可以的。虽然说了这么多，但其实除了高中捣鼓的那些和用cocos时候做过的一些关于ndk的东西以外，我自己对ndk的了解其实也非常非常少，连皮毛都算不上。不过现在我们才大二，时间还多，有的时间去学。共勉！


-------------------------answer 6 via  -------------------------


本来我以为不用的，我以为java就够用了。进了这家直播公司才发现，想java真的很有限。


-------------------------answer 7 via  -------------------------


少年，首先NDK是用来干嘛的，你需要有所了解。NDK一般是用来：1. 避免多平台重复编写代码2. 用一些前人留下的C/C++的轮子3. 安全性考虑，增加拆包难度4. 公司人才贮备、技术选型之类的理由NDK说白了是给你application层调用C/C++代码的方法，我认为不是一个需要学的玩意。最后还是看你算法、数据结构、操作系统的基本功，看你的业务到底要做什么。如果你想探索整个Android底层的实现，你需要去读Android源码，那是另外一码事，不叫“学NDK”。“在底层调用脚本语言lua语句”，我猜学长是想要搞个手游，让你帮忙造造轮子...


-------------------------answer 8 via  -------------------------


第一次学习jni是在深入理解安卓1那本书中，第一次见根本不懂，随便看了一遍，只懂点java调用c++,顺带学了点c++,第二次学jni是在安卓内核剖析中，这次知道了c++调用java知识点挺多的，再次学习在安卓框架揭秘，这次知道了在c++应用程序中调用java,叫invocation api,然后就ndk入门了。


-------------------------answer 9 via  -------------------------


如果想要了解安卓的底层，如果想要开发非常高效的应用，不学习ndk是不行的。毕竟安卓的虚拟机是用c＋＋写的，许多对性能要求很高的模块也是底层用c写出来的。如果只用个java那这个系统是没法用的
