


如何提高编程能力？ - 编程 - 知乎






--------------------Link http://www.zhihu.com/question/19862349 ----------------------





--------------------Detail----------------------

更新于2013/11/20 --冯萝卜例如：如何定义类，类之间的继承关系，接口如何设计，分层设计，如何设计结构体，结构体包含哪些子结构体，换个角度就是如何将事物抽象出来。我的第二个问题是：如何避免可能的错误，或者异常。也就是说在真正的异常出现之前，把它屏蔽掉或者说处理掉。换一个说法，如何提高编程中的严谨能力。让程序更严谨。我举个例子。分析一个regulation，里面有x(乘)有+（加），我需要将一个字符串提取出来并分析其中的乘和加根据负责进行运算。在我提取的过程中，默认有乘有加，就没想到只有加没有乘的情况，我觉得就是因为我在写程序的过程中考虑不够严谨造成的，如何改善？同样，还有一种情况我没有考虑就是当乘机项中有'x'怎么办？这些我都没考虑进去。如何改善？另外，如果我考虑进去了，就会出现一头扎进细节当中拔不出来了。实现了所有的细节之后忽然发现忘了真正的需求是什么了。--针对这个问题我能想到的一个解决方案是：封装，一层层进行封装，但是如何包装这些东西是最合理的呢？在实际的编程过程中 会发现，写一半的时候发现自己当初想的不是最优的方案，需要重写，重新定义函数，不知道高手们有没有遇到过类似的问题，并如何克服的。大神，还有什么其他的经验，一并教教小弟，感激不尽！另外一个小小的要求，希望大家的回答能更实际一些，并给出具体的例子。像这种(我没有恶意)：“多练，多学，多思考” 我觉得没什么可操作性。太抽象。

-------------------------answer 0 via  -------------------------


先好好读书，这里我推荐The art of unix programming，我自己便是看完这书后技术能力才有质的变化。然后，减少看微博、博客、知乎等的时间，最好是彻底不看，这些资讯的网站是非常浮躁的，很难学到真正的东西。学门新语言，比方说go, python, ruby, haskell等等，然后用这门语言去做一个开源项目，比方说，一个ORM。然后，再去看这门语言的成功项目的源码。看看自己写的跟别人的不足是什么，然后，再把自己的项目重新实现一遍。自觉略有所得之后换个方向，比方说模板，再搞个开源项目。服务器后端的MVC各搞一次，还可以再去搞前端的。最后，心态要好，不要急于求成，欲速则不达。修炼一年能有小成就不错的了～


-------------------------answer 1 via  -------------------------


谢邀其实编程能力是次要的，因为这无非是个熟悉某个规则系统的过程。获得解决问题的原理性的智慧才是重要的所以不要沉溺于某种实现、工具、编程系统上，要多思考原理


-------------------------answer 2 via  -------------------------


学习一门简单而且可用性强的语言，写点自动签到、自动下动漫之类的日常小程序，提高编程兴趣（比如 python，可以选择教材 Learn Python The Hard Way）学习常见的算法和数据结构，根据个人喜好选择深浅不同的书籍，如《算法导论》、《大话数据结构》之类的书籍理解面向对象编程、多线程编程、socket编程等常用的技术，无论最终选择哪个方向，这些技术都有很大概率会用到。学习软件工程相关知识，自己参与或完成一个项目，完整地完成从需求分析到软件测试的每一个步骤，了解一个项目应该经过哪些步骤。选定一个方向，深入研究相关算法或技术。阅读相关开源代码、论文等基本做完前四步就算是入了程序员的门径了，对接下来该怎么办心里也有数了


-------------------------answer 3 via  -------------------------


我以前也有这个迷惑，看过《代码大全》后，我开始知道怎么去寻找这些问题的解决方法了。看书+实践。


-------------------------answer 4 via  -------------------------


初学者实现一下正则表达式引擎，对各种能力都有极大的帮助。算法不明白的话可以看我5年前写的两篇广为传播的文章：《构造正则表达式引擎》新鲜出炉啦！，实在不知道怎么实现的可以看我的代码：https://gac.codeplex.com/SourceControl/latest#Common/Source/Regex/Regex.h （不过也没指望连思考都没有过的人可以看明白）。当然如果你们先看了我的代码再自己实现的话，效果会大打折扣。


-------------------------answer 5 via  -------------------------


As easy as "ABC" -- "Always Be Coding".from Weibo


-------------------------answer 6 via  -------------------------


就你举的那个例子来说, 你需要学一学编译原理 (只需要把lexer+parser的部分看完就行, symbol table随意) 体会一下数学模型和形式化方法对程序设计的重要意义. 许多coder坚持hack-oriented programming结果陷进去出不来了, 这是件很悲哀的事情.


-------------------------answer 7 via  -------------------------


如果楼主有很强的定力，可以先从制作简单编译器着手。依据C语言规范来一定一门阉割版C语言，虽然完成的过程比较枯燥，但是当你做成功以后对于编程将越上一大步。然后可以做做一些数据管理系统，了解数据库实现原理。当然也可以学习一些比较有趣的东西，比如Python制作一些爬虫脚本什么的。但是基础一定要打好，像数据结构，算法等等是内功。


-------------------------answer 8 via  -------------------------


编程能力有三部分，相辅相成吧基础知识，比如算法+数据结构，这个就是要多学深，可以深入浅出的学，从大学教材开始看，不过没有考试，没有划重点，没有可选章节。然后可以看看国外的书，网上搜搜，肯定找得到。具体技术，比如c++, java, 文件系统，网络编程等。这个我的感觉是，项目中实践吧。任何一个正儿八经的项目，都会涉及很多具体技术，你写过code，出过错，调试过，google过，基本一个点也就掌握了。意识(common sense? 常识?)  比如你需要解决一个问题，应该怎么做？两条方法，你选了哪个？为什么？基本是前边两点+你犯过的错+看过的书或文章+你的（不是性）倾向。也不用着急去提升这个，平时出什么问题多琢磨琢磨。一个东西多想有哪些解决办法。可能大家说的参与个开源项目啥的能有帮助，不过也不是必需的。刚开始别纠结选什么语言，看什么fancy的技术。计算机的东西其实都是相同的，做深其实也基本会做广，做深之后，你觉得comfortable的时候，再去做广。瞎扯了半天，其实还是 天道酬勤。


-------------------------answer 9 via  -------------------------


初学如果有做过什么以及觉得不错的project的话，想像一些扩展需求，写一些单元测试，然后去把design pattern 和 refactoring 读一下，然后用各种方式重构，不求适用只求能用。改到自己觉得好，然后去看一些开源基本库，比如java的话，可以去读读guava的代码，加到自己的项目里，用guava再重构一遍。然后把可能常用的来源lib不断加到项目里，继续重构。然后找些profiling工具，看看内存和cpu消耗然后做做优化，继续重构。这样 基本的prototyping,test driven,design pattern, refactoring, 第三方库的应用, 性能测试 都练到了，以后定期刷刷算法题。中级，高级的 困扰的恐怕也不是这个问题了
