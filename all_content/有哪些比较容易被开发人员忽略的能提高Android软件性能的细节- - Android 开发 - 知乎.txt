


有哪些比较容易被开发人员忽略的能提高Android软件性能的细节? - Android 开发 - 知乎






--------------------Link http://www.zhihu.com/question/28154442 ----------------------





--------------------Detail----------------------

我是一名初/中级Android开发人员，平时写代码也比较细心。不过最近总感觉有些问题注意的还是不够，希望大家分享一些这方面的东西，谢谢了。

-------------------------answer 0 via  -------------------------


不是Android开发，但是还是说一句：慎用低性能的第三方库调用第三方库、WebView资源确实是方便开发的两大法宝，但是这也带来的不少性能上的问题。以QQ和微信对比为例由于QQi不能良好支持5.0，故无奈使用官方QQ，然而有的页面的滚动性能低的离谱比如这一页，拖动起来十分卡顿，究其原因，应该使用了第三方（或者腾讯内部的）库来实现下拉的阻尼效果。比如这一页，拖动起来十分卡顿，究其原因，应该使用了第三方（或者腾讯内部的）库来实现下拉的阻尼效果。虽然很多人对微信仍然使用iOS Design嗤之以鼻，但是微信内部还是大量使用官方的库和比较新的版本的API。注意下方注意下方微信和QQ似乎实现的是同样的设计，但是在性能和体验上明显微信好的多所以碰到一个开发一个需要的模块时，我觉得开发者应该经历以下思考：1.能不能自己写？写不写的好？2.官方API是否提供类似控件或类？是否理想？3.官方没有这样的控件或类，第三方库有没有？实现的好不好？这也是我希望开发者尽量能适配MD,material_design_zh · GitHub,的原因以最高效率，最可靠的案例，最高的性能来实现应用的关键模块很多的时候，官方库会调用NDK或者是OPENGL实现优化同样是MD，一下两款小应用又有所区别：以及打红框的地方都是和material design标准存在差异的地方，所以这个应用给人略有怪异的感觉打红框的地方都是和material design标准存在差异的地方，所以这个应用给人略有怪异的感觉究其原因，这里的MD实现基于android-support-v7-appcompat的第三方包其他，还有知乎客户端的发现中的滑动的Indicator是用的什么组件？ - AndroidAndroid 5.0 的知乎应用为何呼出左侧的菜单栏会卡顿？当然官方的库也会坑人譬如Google Analytics会使应用体积急剧增大所以上面那个waiting list和绿色守护有一段时间被我怨念和很久接下来说说WebView众所周知，无论ios还是android，系统webview engine和主浏览器的webview engine是有差异的。在android的低端机和杂牌机上系统的引擎渲染效率低下。比如这个应用写着玩玩的，但是由于渲染效率的问题很卡这个应用写着玩玩的，但是由于渲染效率的问题很卡除此之外，还有支付宝、淘宝大量依赖webview，也很卡所以：webview性能除了和引擎有关，还和优化有关譬如你要显示一个千人群的ListView，或者是专辑的列表用webview基本就会很卡老老实实写Layout的话恐怕就可以实现对不显示部分的内存回收，譬如ipod nano6，只有64MB内存，但是面对超长的专辑列表和一大堆专辑封面丝毫不卡


-------------------------answer 1 via  -------------------------


性能优化一般主要分为图形渲染优化，和内存管理优化。图形渲染：布局层级不要太过复杂，可以用HierarchyViewer这个工具优化。尽量避免过度渲染。在手机的开发者选项中又过度渲染的检测工具，可以打开检测，然后对自己的层序进行优化。具体的细节有很多，可能两个叠加的View都设置了backgroud颜色就会照成不必要的过度渲染。内存管理:这里东西就比较多了，比如，加载图片的时候，要对加载的图片大小进行检查，如果加载的图片比控件还要大，那就要对图片进行压缩，不然控件就这么大，再大的图片加载进来也只是浪费内存。多运用Android提供的优化过的数据集合类，如SparseArray<T>代替HashMap<Integer,T>还有一个就是UI线程不要做太耗时的事情。个人觉得比较容易忽视的就是SharedPreference使用。因为Android对SharedPreference的封装实在太好了，导致会让人容易忘记这本质是在进行文件IO操作。read操作时候，小数据量可能耗时还是比较短，大数据量还是开新线程做比较好。write操作时候，可以开新线程，也可以用apply方法代替commit方法。（commit方法是同步的，apply方法是异步的。）


-------------------------answer 2 via  -------------------------


流畅性的优化；包括layout嵌套严重，布局不合理，ui做数据库查询等容易忽略的耗时操作，线程执行的和ui线程抢资源等。内存优化其实更复杂，细节可以写出好多来，我觉得核心一点还是内存不要分配太大，分配的内存要及时干掉引用，避免长生命周期得大内存还有流量和耗电量这些，流量上减少和服务器交互，压缩网络传输内容。耗电除了屏幕主要和cpu相关主要包括网络和后台任务。网络上减少传输次数，减少全功能状态得耗电，另外复用连接也可以减少网络耗电（肯定有超市时间）


-------------------------answer 3 via  -------------------------


尽量用新版本的support包和IDE，之前用supportv7-21.0的RecyclerView会出现NotifyDataSet***不能被正确handler的问题，21.0.3就fix了


-------------------------answer 4 via  -------------------------


最容易忽略的就是：自己想半天写出来的东西，gihub上都已经有fork了几百+的项目了而且比较成熟，但是却由于种种原因不能引入。


-------------------------answer 5 via  -------------------------


个人开发经验，如果你想做一张很大的table，可以用webview来做，效率比UI框架不知道高到哪里去了。


-------------------------answer 6 via  -------------------------


图片缓存机制


-------------------------answer 7 via  -------------------------


如何清除android图片和文字缓存是关键


-------------------------answer 8 via  -------------------------


不要定义太多全局变量 因为生命周期长。 listview 里面用viewholder尤其是加载数据量大时


-------------------------answer 9 via  -------------------------


1、避免布局文件的层次太多，如果UI确实很复杂可以考虑自定义View或者ViewGroup代替 2、使用内部类的时候，尽量定义成static类型，特别是Handler，避免内存泄漏。 3、建议题主仔细阅读Android官方文档training这一章节，http://developer.android.com/training/best-performance.html，里面讲的很详细，都是开放中要注意的地方
