


github 上有哪些非常优秀的 Python 项目可供学习？ - 编程 - 知乎






--------------------Link http://www.zhihu.com/question/26820817 ----------------------





--------------------Detail----------------------



-------------------------answer 0 via  -------------------------


https://github.com/vinta/awesome-python


-------------------------answer 1 via  -------------------------


犹豫再三还是厚着脸皮推荐一下自己的项目GitHub - hubo1016/namedstruct: Define complicated C/C++ structs in Python with variable length arrays, header/extend relations, extensible structures in one time, parse/rebuild them with a single line of code有的时候需要用Python解析C/C++中的二进制结构体，比如读取二进制文件、调用Linux的系统函数、解析裸的以太网数据包等。系统的struct库是个比较方便的选择，但是用struct库我们必须这么写：import struct
myint, myshort, mybyte1, mybyte2 = struct.unpack('>IHBB', mydata)
这个代码很难维护，得记住不同数据类型用什么字母代表，得仔细对齐两边的数据类型和字段名，如过有嵌套的结构那又不行了。而且很丑。用namedstruct应该怎么写呢？from namedstruct import *

mystruct = nstruct((uint32, 'myint'),
                   (uint16, 'myshort'),
                   (uint8, 'mybyte1'),
                   (uint8, 'mybyte2'),
                   name = "mystruct",
                   padding = 1)

myobj = mystruct.parse(mydata)
# 反过来，构造也是可以的
myobj2 = mystruct(myint = 2, myshort = 3, mybyte2 = 4)
mydata2 = myobj2._tobytes()
这个定义跟C/C++中的struct定义的结构很像，很多时候把.h复制出来，照着改一下，马上就有了一个可以用的Python结构体对象。仅仅是这样大概没什么好稀奇的，这个库最重要的功能是支持变长的结构体。常见的有两种，一种是可变数组：mystruct_array = nstruct((uint16, 'length'),
                         (mystruct[0], 'array'),
                         name = "mystruct_array",
                         padding = 1,
                         size = lambda x: x.length,
                         prepack = packsize('length'))

myarray = mystruct_array(array = [mystruct(myint = 2), mystruct(myint = 3)])
# 转为二进制串时，会自动调用prepack，将结构体的大小存进length字段
myarraydata = myarray._tobytes()
# 解析时，会自动调用size，从length字段获取结构体的大小
myarray2 = mystruct_array.parse(myarraydata)
另一种是struct的扩展，一类结构体有共同的头部，根据头部的类型字段判断结构体具体属于何种类型，不同类型结构体后面的字段不同，定义的逻辑与C++的类继承有些类似：mytypeenum = enum('mytypeenum', globals(), uint16,
                  IPV4 = 4,
                  IPV6 = 6)

myheader = nstruct((mytypeenum, 'type'),
                   (uint16, 'length'),
                   name = "myheader",
                   padding = 1,
                   size = lambda x: x.length,
                   prepack = packsize('length'))

mytype1 = nstruct((uint32, 'ip_src'),
                  (uint32, 'ip_dst'),
                   name = "mytype1",
                   padding = 1,
                   base = myheader,
                   criteria = lambda x: x.type == IPV4,
                   init = packvalue(IPV4, 'type'))

mytype2 = nstruct((uint8[16], 'ip6_src'),
                  (uint8[16], 'ip6_dst'),
                   name = "mytype2",
                   padding = 1,
                   base = myheader,
                   criteria = lambda x: x.type == IPV6,
                   init = packvalue(IPV6, 'type'))

# 可以用基类来定义数组，数组中可以混合存储派生类型

myheader_array = nstruct((uint16, 'length'),
                         (myheader[0], 'array'),
                         name = "myheader_array",
                         padding = 1，
                         size = lambda x: x.length,
                         prepack = packsize('length'))

arrayobj = myheader_array(array = [mytype1(ip_src = 12, ip_dst = 24),
                                   mytype2(ip6_src = [0] * 11 + [1],
                                           ip6_dst = [0] * 12)])
这个库能够定义多复杂的结构体呢？在misc目录当中，我用这个库的功能定义了常见的网络包的格式，和Openflow协议的全部结构体。namedstruct/packetdump.py at master · hubo1016/namedstruct · GitHub这个脚本用相应的定义实现了一个类似于tcpdump的抓包工具，不算ethernet的定义只有253行，ethernet里面的定义也只有1000行，执行方法是首先安装namedstruct库：pip install nstruct然后将packetdump.py和ethernet.py两个文件复制到本地，然后（必须在Linux操作系统上）python packetdump.py proto=IPPROTO_ICMP玩一玩这个packetdump也是挺有意思的，如过有兴趣可以再看看ethernet的定义和namedstruct的实现。代码写的挺乱的，不知道适不适合学习……


-------------------------answer 2 via  -------------------------


做数据分析：pandas，提供了类似R的dataframe的一种数据结构。文档很详细。数据可视化，绘图：matplotlib，跟matlab很相似。机器学习算法：scikit-learn。不过源码可不好读。


-------------------------answer 3 via  -------------------------


http://www.zhihu.com/question/25697796
