


在编程和算法领域，有哪些经典问题？ - 编程 - 知乎






--------------------Link http://www.zhihu.com/question/19927564 ----------------------





--------------------Detail----------------------

fibonacci 是一个, 我先说掉了...

-------------------------answer 0 via  -------------------------


刚刚才看到一篇百度百科经典算法合集，贴到着来。共勉啊亲~！排序 排序算法:http://baike.baidu.com/view/297739.htm 冒泡排序法:http://baike.baidu.com/view/1313793.htm 起泡法:http://baike.baidu.com/view/174304.htm 鸡尾酒排序:http://baike.baidu.com/view/1981861.htm 桶排序:http://baike.baidu.com/view/1784217.htm 计数排序:http://baike.baidu.com/view/1209480.htm 归并排序:http://baike.baidu.com/view/90797.htm 排序二叉树:http://baike.baidu.com/view/922220.html 鸽巢排序:http://baike.baidu.com/view/2020276.htm 基数排序:http://baike.baidu.com/view/1170573.htm 选择排序法:http://baike.baidu.com/view/1575807.htm 希尔排序:http://baike.baidu.com/view/178698.htm 堆排序:http://baike.baidu.com/view/157305.htm 快速排序算法:http://baike.baidu.com/view/19016.htm 插入排序法:http://baike.baidu.com/view/1443814.htm 树形选择排序:http://baike.baidu.com/view/3108940.html ======================================================== 搜索 深度优先搜索:http://baike.baidu.com/view/288277.htm 宽度优先搜索:http://baike.baidu.com/view/825760.htm 启发式搜索:http://baike.baidu.com/view/1237243.htm 蚁群算法:http://baike.baidu.com/view/539346.htm 遗传算法:http://baike.baidu.com/view/45853.htm ======================================================== 计算几何 凸包:http://baike.baidu.com/view/707209.html ======================================================== 图论 哈夫曼编码:http://baike.baidu.com/view/95311.htm 二叉树遍历:http://baike.baidu.com/view/549587.html 最短路径:http://baike.baidu.com/view/349189.htm Dijkstra算法:http://baike.baidu.com/view/7839.htm A*算法:http://baike.baidu.com/view/7850.htm SPFA算法:http://baike.baidu.com/view/682464.html Bellman-Ford算法:http://baike.baidu.com/view/1481053.htm floyd-warshall算法:http://baike.baidu.com/view/2749461.htm Dijkstra算法:http://baike.baidu.com/view/7839.htm 最小生成树:http://baike.baidu.com/view/288214.htm Prim算法:http://baike.baidu.com/view/671819.html 网络流:http://baike.baidu.com/view/165435.html ======================================================== 动态规划 动态规划:http://baike.baidu.com/view/28146.htm 哈密顿图:http://baike.baidu.com/view/143350.html 递推:http://baike.baidu.com/view/3783120.htm ======================================================== 动态规划优化 优先队列:http://baike.baidu.com/view/1267829.htm 单调队列:http://baike.baidu.com/view/3771451.htm 四边形不等式:http://baike.baidu.com/view/1985058.htm ======================================================== 其他 随机化算法:http://baike.baidu.com/view/1071553.htm 递归:http://baike.baidu.com/view/96473.htm 穷举搜索法:http://baike.baidu.com/view/1189634.htm 贪心算法:http://baike.baidu.com/view/112297.htm 分治法:http://baike.baidu.com/view/1583824.htm 迭代法:http://baike.baidu.com/view/649495.htm 加密算法:http://baike.baidu.com/view/155969.htm 回溯法:http://baike.baidu.com/view/45.htm 弦截法:http://baike.baidu.com/view/768310.htm 迭代法:http://baike.baidu.com/view/649495.htm 背包问题:http://baike.baidu.com/view/841810.htm http://baike.baidu.com/view/1731915.htm 八皇后问题:http://baike.baidu.com/view/698719.htm 百鸡问题:http://baike.baidu.com/view/367996.htm 二分法:http://baike.baidu.com/view/75441.htm kmp算法:http://baike.baidu.com/view/659777.html 遗传算法:http://baike.baidu.com/view/45853.htm 矩阵乘法:http://www.douban.com/group/topic/12416781/edit Floyd算法:http://baike.baidu.com/view/14495.html 路由算法:http://baike.baidu.com/view/2276401.html ICP算法:http://baike.baidu.com/view/1954001.html 约瑟夫环:http://baike.baidu.com/view/717633.htm 约瑟夫问题:http://baike.baidu.com/view/213217.htm AVL树:http://baike.baidu.com/view/414610.htm 红黑树:http://baike.baidu.com/view/133754.htm 退火算法:http://baike.baidu.com/view/335371.htm#sub335371 并查集:http://baike.baidu.com/view/521705.htm 线段树:http://baike.baidu.com/view/670683.htm 左偏树:http://baike.baidu.com/view/2918906.htm Treap:http://baike.baidu.com/view/956602.htm Trie树:http://baike.baidu.com/view/1436495.html RMQ:http://baike.baidu.com/view/1536346.htm LCA :http://baike.baidu.com/view/409050.htm 矩阵乘法:http://baike.baidu.com/view/2455255.htm 高斯消元:http://baike.baidu.com/view/33268.html 银行家算法:http://baike.baidu.com/view/93075.htm *分类参照维基百科里算法的分类http://zh.wikipedia.org/zh-cn/%E7%AE%97%E6%B3%95


-------------------------answer 1 via  -------------------------


经典算法：       递归：汉诺塔，全排列的生成等      分治法：快速排序、归并排序等     贪心法：背包问题、Dijkstra、Prim算法       动态规划：0-1背包问题，各种子串问题       搜索法：N皇后问题、迷宫问题   随机算法：蒙特卡洛、随机快排等       近似算法：TSP等方面相关算法等       在线算法：K-服务器问题等       应用方面的算法：       K-Means、ID3等算法        以上都是经典的不能再经典的算法，也是算法入门必读


-------------------------answer 2 via  -------------------------


我觉得终极问题应该是，写一个程序，扫描一个exe文件，然后判断是否跟产品狗给出的docx一致（逃


-------------------------answer 3 via  -------------------------


p == or != NP


-------------------------answer 4 via  -------------------------


排序(经典的快速排序，归并排序，堆排序，冒泡，插入，选择，希尔排序等)，查找(线性查找，二叉查找树，哈希)，贪婪算法，动态规划(背包，矩阵链乘等)，搜索(BFS,DFS, A*)，单源最短路径，最小生成树，并查集等等


-------------------------answer 5 via  -------------------------


买本算导配着编程之美看看吧。


-------------------------answer 6 via  -------------------------


3n+1


-------------------------answer 7 via  -------------------------


石子归并问题。n堆石子摆成一条线。现要将石子有次序地合并成一堆。规定每次只能选相邻的2堆石子合并成新的一堆，并将新的一堆石子数记为该次合并的代价。试设计一个算法，计算出将n堆石子合并成一堆的最小代价。    举个例子，比如： 1 2 3 4，有不少合并方法，比如   1 2 3 4 => 3 3 4(3) => 6 4(9) => 10(19)     1 2 3 4 => 1 5 4(5) => 1 9(14) => 10(24)     1 2 3 4 => 1 2 7(7) => 3 7(10) => 10(20)   括号里面为总代价，可以看出，第一种方法的代价最低，现在随便给出n堆石子，用程序算出这个最小合并代价。


-------------------------answer 8 via  -------------------------


拖了好久～拖延症要不得啊～～～前面有各位大神全面介绍了很多经典算法。我就介绍稍微小众一些的算法--参数算法(Parameterized Algorithm)。在解决NP难的问题时，为了能处理海量数据，会退而求其次选择启发式算法，近似算法，随机算法等非精确算法，虽然能使时间复杂度降低到多项式级别，但是得到的结果是近似的，哪怕是PTAS的算法。相当多的问题要求必须得到精确解，近似解是没有意义的。这就需要参数算法出场了。NP难的问题时间复杂度都是指数，将所有可能全部遍历一次的时间复杂度是，很多时候我们最后得到的解集大小和总输入大小相差很多，所以想到将指数降低到解集大小，也就是把复杂度从降低到，这样我们能够处理的数据就更多了呢。但是，不是所有NP难的问题都能使用参数算法解决，能解决的被称为FPT(Fixed-Parameter Tractable)，不能的就很遗憾了，就要把这些问题归属到W-hard，又根据难度的不同分为W[1]-HARD，W[2]-HARD等等，大多数就这两个等级，例如著名的最大团问题(Maximal Clique)，独立集问题(Independent Set)都属于W[1]-HARD，维基百科上有介绍。好像扯远了，回到FPT上吧，从Richard M. Karp的21个问题[1](8000多的引用啊！)出发，包括后来出现的一些新的经典问题，规约关系如下图：恩。最开始被证明是NP-Complete的问题是3-SAT问题，其他的做规约就可以了。恩。最开始被证明是NP-Complete的问题是3-SAT问题，其他的做规约就可以了。说个边支配集问题(Edge Dominating Set)吧最开始被MR Garey和DS Johnson证明NPC问题[2](那个时候证明NPC是很时髦的啊，能发很好的Journal啊)又被Yannakakis和Gavril证明在最大度为3的二分图中依然是NPC的[3]。最新的成果是在2012年，在一般图和3度图中的时间复杂度分别为和Reference:[1]R. M. Karp, Reducibility among combinatorial problems. Springer, 1972.[2]M. R. Garey and D. S. Johnson, “The rectilinear Steiner tree problem is NP-complete,” SIAM Journal on Applied Mathematics, vol. 32, no. 4, pp. 826–834, 1977.[3]M. Yannakakis and F. Gavril, “Edge dominating sets in graphs,” SIAM Journal on Applied Mathematics, vol. 38, no. 3, pp. 364–372, 1980.


-------------------------answer 9 via  -------------------------


求最小独立边支配集的算法
