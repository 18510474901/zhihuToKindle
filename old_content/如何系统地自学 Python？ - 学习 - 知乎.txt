


如何系统地自学 Python？ - 学习 - 知乎






--------------------Link http://www.zhihu.com/question/29138020 ----------------------





--------------------Detail----------------------

零基础情况下，想学一门语言。另 《Python 编程入门经典》这本书怎么样，是否值得看？

-------------------------answer 0 via  -------------------------


Python 其实挺简单的，也挺强大的。我用 Python 做科学计算，自学一年，也记了一年的笔记。笔记链接：GitHub - 中文 Python 笔记Jupyter Notebook - 中文 Python 笔记笔记目录：01. Python 工具01.01 Python 简介01.02 Ipython 解释器01.03 Ipython notebook01.04 使用 Anaconda02. Python 基础02.01 Python 入门演示02.02 Python 数据类型02.03 数字02.04 字符串02.05 索引和分片02.06 列表02.07 可变和不可变类型02.08 元组02.09 列表与元组的速度比较02.10 字典02.11 集合02.12 不可变集合02.13 Python 赋值机制02.14 判断语句02.15 循环02.16 列表推导式02.17 函数02.18 模块和包02.19 异常02.20 警告02.21 文件读写03. Numpy03.01 Numpy 简介03.02 Matplotlib 基础03.03 Numpy 数组及其索引03.04 数组类型03.05 数组方法03.06 数组排序03.07 数组形状03.08 对角线03.09 数组与字符串的转换03.10 数组属性方法总结03.11 生成数组的函数03.12 矩阵03.13 一般函数03.14 向量化函数03.15 二元运算03.16 ufunc 对象03.17 choose 函数实现条件筛选03.18 数组广播机制03.19 数组读写03.20 结构化数组03.21 记录数组03.22 内存映射03.23 从 Matlab 到 Numpy04. Scipy04.01 SCIentific PYthon 简介04.02 插值04.03 概率统计方法04.04 曲线拟合04.05 最小化函数04.06 积分04.07 解微分方程04.08 稀疏矩阵04.09 线性代数04.10 稀疏矩阵的线性代数05. Python 进阶05.01 sys 模块简介05.02 与操作系统进行交互：os 模块05.03 CSV 文件和 csv 模块05.04 正则表达式和 re 模块05.05 datetime 模块05.06 SQL 数据库05.07 对象关系映射05.08 函数进阶：参数传递，高阶函数，lambda 匿名函数，global 变量，递归05.09 迭代器05.10 生成器05.11 with 语句和上下文管理器05.12 修饰符05.13 修饰符的使用05.14 operator, functools, itertools, toolz, fn, funcy 模块05.15 作用域05.16 动态编译06. Matplotlib06.01 Pyplot 教程06.02 使用 style 来配置 pyplot 风格06.03 处理文本（基础）06.04 处理文本（数学表达式）06.05 图像基础06.06 注释06.07 标签06.08 figures, subplots, axes 和 ticks 对象06.09 不要迷信默认设置06.10 各种绘图实例07. 使用其他语言进行扩展07.01 简介07.02 Python 扩展模块07.03 Cython：Cython 基础，将源代码转换成扩展模块07.04 Cython：Cython 语法，调用其他C库07.05 Cython：class 和 cdef class，使用 C++07.06 Cython：Typed memoryviews07.07 生成编译注释07.08 ctypes08. 面向对象编程08.01 简介08.02 使用 OOP 对森林火灾建模08.03 什么是对象？08.04 定义 class08.05 特殊方法08.06 属性08.07 森林火灾模拟08.08 继承08.09 super() 函数08.10 重定义森林火灾模拟08.11 接口08.12 共有，私有和特殊方法和属性08.13 多重继承09. Theano 基础09.01 Theano 简介及其安装09.02 Theano 基础09.03 Theano 在 Windows 上的配置09.04 Theano 符号图结构09.05 Theano 配置和编译模式09.06 Theano 条件语句09.07 Theano 循环：scan（详解）09.08 Theano 实例：线性回归09.09 Theano 实例：Logistic 回归09.10 Theano 实例：Softmax 回归09.11 Theano 实例：人工神经网络09.12 Theano 随机数流变量09.13 Theano 实例：更复杂的网络09.14 Theano 实例：卷积神经网络09.15 Theano tensor 模块：基础09.16 Theano tensor 模块：索引09.17 Theano tensor 模块：操作符和逐元素操作09.18 Theano tensor 模块：nnet 子模块09.19 Theano tensor 模块：conv 子模块10. 有趣的第三方模块10.01 使用 basemap 画地图10.02 使用 cartopy 画地图10.03 探索 NBA 数据11. 有用的工具11.01 pprint 模块：打印 Python 对象11.02 pickle, cPickle 模块：序列化 Python 对象11.03 json 模块：处理 JSON 数据11.04 glob 模块：文件模式匹配11.05 shutil 模块：高级文件操作11.06 gzip, zipfile, tarfile 模块：处理压缩文件11.07 logging 模块：记录日志11.08 string 模块：字符串处理11.09 collections 模块：更多数据结构11.10 requests 模块：HTTP for Human12. Pandas12.01 十分钟上手 Pandas12.02 一维数据结构：Series12.03 二维数据结构：DataFrame


-------------------------answer 1 via  -------------------------


是否非常想学好 Python，一方面被琐事纠缠，一直没能动手，另一方面，担心学习成本太高，心里默默敲着退堂鼓？幸运的是，Python 是一门初学者友好的编程语言，想要完全掌握它，你不必花上太多的时间和精力。Python 的设计哲学之一就是简单易学，体现在两个方面：语法简洁明了：相对 Ruby 和 Perl，它的语法特性不多不少，大多数都很简单直接，不玩儿玄学。切入点很多：Python 可以让你可以做很多事情，科学计算和数据分析、爬虫、Web 网站、游戏、命令行实用工具等等等等，总有一个是你感兴趣并且愿意投入时间的。废话不多说，学会一门语言的捷径只有一个： Getting Started¶ 起步阶段任何一种编程语言都包含两个部分：硬知识和软知识，起步阶段的主要任务是掌握硬知识。°1 硬知识“硬知识”指的是编程语言的语法、算法和数据结构、编程范式等，例如：变量和类型、循环语句、分支、函数、类。这部分知识也是具有普适性的，看上去是掌握了一种语法，实际是建立了一种思维。例如：让一个 Java 程序员去学习 Python，他可以很快的将 Java 中的学到的面向对象的知识 map 到 Python 中来，因此能够快速掌握 Python 中面向对象的特性。如果你是刚开始学习编程的新手，一本可靠的语法书是非常重要的。它看上去可能非常枯燥乏味，但对于建立稳固的编程思维是必不可少。下面列出了一些适合初学者入门的教学材料：❖「笨方法学 Python」：http://learnpythonthehardway.org/book/这本书在讲解 Python 的语法成分时，还附带大量可实践的例子，非常适合快速起步。❖「廖雪峰的 Python 2.7 教程」：Home - 廖雪峰的官方网站Python 中文教程的翘楚，专为刚刚步入程序世界的小白打造。❖「The Hitchhiker’s Guide to Python!」：The Hitchhiker’s Guide to Python!这本指南着重于 Python 的最佳实践，不管你是 Python 专家还是新手，都能获得极大的帮助。❖「Python 官方文档」：Our Documentation实践中大部分问题，都可以在官方文档中找到答案。❖ 辅助工具：Python Tutor一个 Python 对象可视化的项目，用图形辅助你理解 Python 中的各种概念。Python 的哲学：用一种方法，最好是只有一种方法来做一件事。学习也是一样，虽然推荐了多种学习资料，但实际学习的时候，最好只选择其中的一个，坚持看完。必要的时候，可能需要阅读讲解数据结构和算法的书，这些知识对于理解和使用 Python 中的对象模型有着很大的帮助。°2 软知识“软知识”则是特定语言环境下的语法技巧、类库的使用、IDE的选择等等。这一部分，即使完全不了解不会使用，也不会妨碍你去编程，只不过写出的程序，看上去显得“傻”了些。对这些知识的学习，取决于你尝试解决的问题的领域和深度。对初学者而言，起步阶段极易走火，或者在选择 Python 版本时徘徊不决，一会儿看 2.7 一会儿又转到 3.0，或者徜徉在类库的大海中无法自拔，Scrapy，Numpy，Django 什么都要试试，或者参与编辑器圣战、大括号缩进探究、操作系统辩论赛等无意义活动，或者整天跪舔语法糖，老想着怎么一行代码把所有的事情做完，或者去构想圣洁的性能安全通用性健壮性全部满分的解决方案。很多“大牛”都会告诫初学者，用这个用那个，少走弯路，这样反而把初学者推向了真正的弯路。还不如告诉初学者，学习本来就是个需要你去走弯路出 Bug，只能脚踏实地，没有奇迹只有狗屎的过程。选择一个方向先走下去，哪怕脏丑差，走不动了再看看有没有更好的解决途径。自己走了弯路，你才知道这么做的好处，才能理解为什么人们可以手写状态机去匹配却偏要发明正则表达式，为什么面向过程可以解决却偏要面向对象，为什么我可以操纵每一根指针却偏要自动管理内存，为什么我可以嵌套回调却偏要用 Promise...更重要的时，你会明白，高层次的解决方法都是对低层次的封装，并不是任何情况下都是最有效最合适的。技术涌进就像波浪一样，那些陈旧的封存已久的技术，消退了迟早还会涌回的。就像现在移动端应用、手游和 HTML5 的火热，某些方面不正在重演过去 PC 的那些历史么？因此，不要担心自己走错路误了终身，坚持并保持进步才是正道。起步阶段的核心任务是掌握硬知识，软知识做适当了解，有了稳固的根，粗壮的枝干，才能长出浓密的叶子，结出甜美的果实。¶ 发展阶段完成了基础知识的学习，必定会感到一阵空虚，怀疑这些语法知识是不是真的有用。没错，你的怀疑是非常正确的。要让 Python 发挥出它的价值，当然不能停留在语法层面。发展阶段的核心任务，就是“跳出 Python，拥抱世界”。在你面前会有多个分支：科学计算和数据分析、爬虫、Web 网站、游戏、命令行实用工具等等等等，这些都不是仅仅知道 Python 语法就能解决的问题。拿爬虫举例，如果你对计算机网络，HTTP协议，HTML，文本编码，JSON一无所知，你能做好这部分的工作么？而你在起步阶段的基础知识也同样重要，如果你连循环递归怎么写都还要查文档，连 BFS 都不知道怎么实现，这就像工匠做石凳每次起锤都要思考锤子怎么使用一样，非常低效。在这个阶段，不可避免要接触大量类库，阅读大量书籍的。°1 类库方面「Awesome Python 项目」：vinta/awesome-python · GitHub这里列出了你在尝试解决各种实际问题时，Python 社区已有的工具型类库，如下图所示：你可以按照实际需求，寻找你需要的类库。至于相关类库如何使用，必须掌握的技能便是阅读文档。由于开源社区大多数文档都是英文写成的，所以，英语不好的同学，需要恶补下。°2 书籍方面：这里我只列出一些我觉得比较有一些帮助的书籍，详细的请看豆瓣的书评：科学和数据分析：❖「集体智慧编程」：集体智慧编程 (豆瓣)❖「数学之美」：数学之美 (豆瓣)❖「统计学习方法」：统计学习方法 (豆瓣)❖「Pattern Recognition And Machine Learning」：Pattern Recognition And Machine Learning (豆瓣)❖「数据科学实战」：数据科学实战 (豆瓣)❖「数据检索导论」：信息检索导论 (豆瓣)爬虫：❖「HTTP 权威指南」：HTTP权威指南 (豆瓣)Web 网站：❖「HTML & CSS 设计与构建网站」：HTML & CSS设计与构建网站 (豆瓣)... 列到这里已经不需要继续了。聪明的你一定会发现上面的大部分书籍，并不是讲 Python 的书，而更多的是专业知识。事实上，这里所谓“跳出 Python，拥抱世界”，其实是发现 Python 和专业知识相结合，能够解决很多实际问题。这个阶段能走到什么程度，更多的取决于自己的专业知识。¶ 深入阶段这个阶段的你，对 Python 几乎了如指掌，那么你一定知道 Python 是用 C 语言实现的。可是 Python 对象的“动态特征”是怎么用相对底层，连自动内存管理都没有的C语言实现的呢？这时候就不能停留在表面了，勇敢的拆开 Python 的黑盒子，深入到语言的内部，去看它的历史，读它的源码，才能真正理解它的设计思路。这里推荐一本书：「Python 源码剖析」：Python源码剖析 (豆瓣)这本书把 Python 源码中最核心的部分，给出了详细的阐释，不过阅读此书需要对 C 语言内存模型和指针有着很好的理解。另外，Python 本身是一门杂糅多种范式的动态语言，也就是说，相对于 C 的过程式、 Haskell 等的函数式、Java 基于类的面向对象而言，它都不够纯粹。换而言之，编程语言的“道学”，在 Python 中只能有限的体悟。学习某种编程范式时，从那些面向这种范式更加纯粹的语言出发，才能有更深刻的理解，也能了解到 Python 语言的根源。这里推荐一门公开课「编程范式」：斯坦福大学公开课：编程范式讲师高屋建瓴，从各种编程范式的代表语言出发，给出了每种编程范式最核心的思想。值得一提的是，这门课程对C语言有非常深入的讲解，例如C语言的范型和内存管理。这些知识，对阅读 Python 源码也有大有帮助。Python 的许多最佳实践都隐藏在那些众所周知的框架和类库中，例如 Django、Tornado 等等。在它们的源代码中淘金，也是个不错的选择。¶  最后的话每个人学编程的道路都是不一样的，其实大都殊途同归，没有迷路的人只有不能坚持的人。虽然听上去有点鸡汤，但是这是事实。希望想学 Python 想学编程的同学，不要犹豫了，看完这篇文章，Just getting started～另外，欢迎私信本喵交流 Python 的学习经验哦 > .<


-------------------------answer 2 via  -------------------------


从machine learning或者web或者爬虫入手Python，会比较有成就感，不枯燥天天print，初学者学个几天就没动力了我推荐，machine learning in action，一点点线性代数基础即可阅读此书web学习flask，遇到不懂的语法查文档爬虫学习scrapy，同上，遇到不懂的语法查文档真的，用Python写个预测足球比赛结果的小程序或个人博客或抓取微博数据，比天天对着书上无聊的print好多了


-------------------------answer 3 via  -------------------------


Python很简单的，很容易学。我看这本书，就花了一节课的功夫，40分钟，就学完了。但问题在于，因为不常用，每次用之前，都得再花40分钟。。。


-------------------------answer 4 via  -------------------------


最简单的方法当然是读 Learn Python The Hard Way 了http://learnpythonthehardway.org/book/唔，LPTHW 好像还在鼓吹 Python 2 那就学 HtDP 好了，反正 Python 也是个 Lisp 的真子集（


-------------------------answer 5 via  -------------------------


推荐图书《python核心编程第2版》推荐的ide或编辑器。推荐的ide或编辑器。python ide或编辑器:vim, sublime text, atom, vs code, pycharm,eclipse +pydev等python学习路线图：python程序员学习路线图 python+ 数据结构和算法 + linux + 软件工程 + web开发 +javascript+ git版本控制+沟通技巧等等。零基础学习者首先要解决的问题是，自己能动手写代码解决问题。学习编程不是纯学语法，需要学习计算思维，编程思路。看看黄哥写的文章或许对你有帮助。如何通过学习python学会编程article/how_to_learn_python.md at master · pythonpeixun/article · GitHub如何捅破python编程的那层纸视频如何捅破python编程的那层纸


-------------------------answer 6 via  -------------------------


《Python 编程入门经典》不推荐。Python的好书实在太少，可以参考我在 Python书籍推荐 - Python之美 - 知乎专栏 推荐的书。学习一个语言包含2部分：「技」和「术」。从买书看基本语法和拷贝别人的代码开始学习Python，尽量让代码符合PEP8，尽量让代码写得Pythonic（这点很关键，未来就不再需要费力改正学习过程中留下的坏习惯了），了解各种Python高级玩法、黑魔法。 这些都是「术」，可以通过看书、看其他人的博客、订阅一些邮件列表等方式获取。了解别人怎么想的，别人怎么做的来提高自己，当然，前提是你愿意花时间去记忆这些琐碎的内容。有了术还远远不够，还需要有实际的经验，以及在正确的时机使用正确的工具和方法，这是技。技是一套分析并解决问题的思路，要想提高技，除了个人的领悟，最重要的是靠大量的实践，有时候我们称之为造轮子。关键是在造的过程中得思考，比如什么时候该抽象了、这个轮子和竞品相比有什么优劣、技术选型上为什么要使用XX？你需要知其然也要知其所以然。可以通过看Python标准库，优秀的开源项目等方式提高。也要看更多的人的博客和分享去给自己灵感和纠正。Python是一个入门很容易，晋升很难的语言。大部分停留在「会用」的阶段。如果你只是为了用它工作，上面的2条就够了。如果希望更精深，那一定要订阅Python社区的邮件列表，了解核心开发者是怎么考虑的，要多参与开源项目和Python社区。我还没有到精通（全中国我也没发现一个精通Python的人），只能帮你到这里了。


-------------------------answer 7 via  -------------------------


讲真，百度"廖雪峰"。简直神一样的入门网站!===========增补分割线==========当然我的意思不是专业性多么强,而是这个网站能比较系统的带新手入门(一般学习一门语言最困难的地方是入门阶段)整个网站逻辑通顺内容丰厚,还带了一门git入门课利益相关:我已经打钱赞助了.....p.s.网址:Home - 廖雪峰的官方网站


-------------------------answer 8 via  -------------------------


看那本 <metaprogramming ruby 2nd>啊


-------------------------answer 9 via  -------------------------


熟练掌握REPL和IDLE让你随时可以试验语言功能，对初学者来说尤其重要，它们给学习者一个可以下手 — 更重要的，探索的地方。这是装好python就有的工具。熟悉了REPL以后，找一本可以帮你练习的书：Fluent Python：个人觉得组织得最精粹的书Python Playground：涵盖python应用最广，可能是最有趣的书Introducing Python: Modern Computing in Simple Packages
