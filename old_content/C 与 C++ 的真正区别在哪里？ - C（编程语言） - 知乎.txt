


C 与 C++ 的真正区别在哪里？ - C（编程语言） - 知乎






--------------------Link http://www.zhihu.com/question/28834538 ----------------------





--------------------Detail----------------------

除了面向对象与面向过程这个回答之外，C与C++的真正区别在哪里？这几年不管是社团实习工作面试都有被问到这个问题。但是“面向对象以及面向过程”这个回答似乎都不是最好或者最完善的答案。希望能从语言的语言特性，使用场景，设计哲学等方面得到完整解释。

-------------------------answer 0 via  -------------------------


C++ 几乎是 C 的超集，只有少量功能 C++ 不支持。C++ 多出来的东西太多，很难列举，我截 cppreference 的图直观比较一下吧。C languageC++ language可以看到，C++ 比 C 多了 classes、templates、exceptions 这些部分，而每个部分也有很多新增的东西。这还只是语言部分，还未谈及标准库。C 有 29 个标准库头文件，C++ 有 87 个，除了量，C++ 标准库的功能要复杂得多。关于 C/C++的做用时机，引用旧文《C++强大背后 - Milo Yip》的一段落：使用C++还是C?C++ 和 C 的设计哲学并不一样，两者取舍不同，所以不同的程序员和软件项目会有不同选择，难以一概而论。与 C++ 相比，C 具备编译速度快、容易学习、显式描述程序细节、较少更新标准（后两者也可同时视为缺点）等优点。在语言层面上，C++ 包含绝大部分 C 语言的功能（例外之一，C++没有C99的变长数组VLA），且提供 OOP 和 GP 的特性。但其实用 C 也可实现 OOP 思想，亦可利用宏去实现某程度的 GP，只不过 C++ 的语法能较简洁、自动地实现OOP/GP。C++ 的 RAII（resource acquisition is initialization，资源获取就是初始化）特性比较独特，C/C#/Java 没有相应功能。回顾历史，Stroustrup 开发的早期 C++ 编译器 Cpre/Cfront 是把 C++ 源代码翻译为 C，再用 C 编译器编译的。由此可知，C++ 编写的程序，都能用等效的 C 程序代替，但 C++ 在语言层面上提供了 OOP/GP 语法、更严格的类型检查系统、大量额外的语言特性（如异常、RTTI等），并且 C++ 标准库也较丰富。有时候 C++ 的语法可使程序更简洁，如运算符重载、隐式转换。但另一方面，C 语言的 API 通常比 C++ 简洁，能较容易供其他语言程序调用。因此，一些 C++ 库会提供 C 的 API 封装，同时也可供 C 程序调用。相反，有时候也会把 C 的 API 封装成 C++ 形式，以支持 RAII 和其他 C++ 库整合等。


-------------------------answer 1 via  -------------------------


C++语言的设计和演化 (豆瓣)Stroustrup: The C++ Programming Language (4th Edition)听 C++ 的创造者给您细细讲。-----------------Update:我不赞同面试官问这个是打开话题。如果是学生，想通过做点玩具项目总结出“C 与 C++ 的真正区别”，还要：希望能从语言的语言特性，使用场景，设计哲学等方面得到完整解释个人认为有点异想天开。如果是社招，被问这个问题，那真是浪费时间，直接从项目入手，话题应有尽有。如果你是个学生，且被问到这种问题，那表明这个面试官估计早早华丽转身，已经走上光荣的管理岗；另一种可能就是，他一直混学术圈，干点啥事都喜欢上升到“本质”以及“哲学高度”。那么你该如何应对呢？只做过屁大点项目？刚弄完毕业设计？没关系，上面给你提到的两本书好好读读，然后就开始扯吧，一定要“见微知著”，一定要“从细节出发”，看到面试官面露微笑，喜不自胜，你就该放心了。如果你是个工作多年的开发，且被问到这种问题。那你要小心了，你要进入的团队很可能有点“不务实”，你很有可能在工作中遭遇 如何看待七牛 CEO 许式伟开源的 Cerl？ - C++ 这个问题中老许遭遇的尴尬场面。面对刚刚走出校园的热血青年（各个熟读 Effective C++ 三部曲，正愁找不到用武之地），你几乎毫无还手之力，无论你写了多少年 C++，经历多少大项目也没用，做好准备早早退场吧。--------------------说实在的：我见过很多十几年以上经验的C/C++工程师，经历过很多大项目。他们很少提及诸如“C 和 C++的真正区别” 这种话题，他们通常关心 “是否稳定，是否可维护，是否扩展性好” 这种问题。遇到什么尺寸的脚，你就穿什么样的鞋；碰到啥样的螺丝，你就用对应的扳手。语言的区别在真正工作中，起到的作用实在太有限了。很多老鸟，根本就不区分，统一称之为 C++，如曾经沸沸扬扬的 0 bug (豆瓣) 一书的作者，就宣称自己是使用C++的。但区分的很鲜明的，也是有的，如 云风 和 Linus 那样的，但人家都是狂喷C++型的，不区分清楚嘴都张不开。我想说，这些老前辈，别看人家不怎么玩“这标准那标准”，也绝口不提“C与C++的本质区别”，但人家项目都做得很溜，很好使，在线上不间断运行很多年都很少出问题的。问这个，还不如问问：你遇到过 最难调试修复的 bug 是怎样的？ C 语言有哪些缺陷？ 或者你就往具体了问：C++ 工程实践(7)：iostream 的用途与局限C++强大背后 - Milo Yip远比这种“玄学”问题好得多，另外，我还真没见过比C++之父更清楚“C与C++ 真正区别”的人。他应该算是这个“领域”的顶级专家了。


-------------------------answer 2 via  -------------------------


请客观对待刁难你的傻逼面试官。匿了[匿][匿名][anonymous][anonymous name]算了……


-------------------------answer 3 via  -------------------------


如果面试官问我我就随便说两句要是他敢说我错了我直接糊他一脸然后扬长而去。


-------------------------answer 4 via  -------------------------


一些区别：C： 编写C代码，写出来的是C代码。C++：编写C++代码，写出来的是还是C代码。C：运行时内存错误。C++：看起来像是运行时内存错误。C：编译器警告你。C++：编译器警告它自己。C：1天学会，1年掌握。C++：1年学会，-1年掌握。C：Goto有害。C++：C++可以无害。C：入门语言。C++：出门语言。C：面向过程。C++：面向C++。C：一切皆指针。C++：一切皆编译器。C：烂代码能轻易编过，也能轻易调过。C++：烂代码不能轻易编过，也不能轻易调过。C：说精通的可能精通。C++：说精通的肯定不精通。


-------------------------answer 5 via  -------------------------


先说一个实际情况，有相当一部分程序员仅仅把c++当成能够在任意地方声明变量的c语言来写程序。即使使用类、继承之类的特性，也是比较蹩脚的套概念。好，下面针对题主的问题进行回答：语言特性前面答主已经列的很详细了，类、模板这些特性都是现代高级语言的特性，这些特性使得c++可以支持非常复杂的开发模式。使用场景，个人观点，所有c可以实现的复杂工程，都可以用c++优雅的实现。甚至包括操作系统内核。c++对于指令、内存的操作的能力是从c继承过来的，所以要求精确到汇编级的程序可以用c++开发。另外因为c++有面向对象的能力，所以c++可以以脚本语言的形式开发大型复杂工程。对于设计哲学，c++与c完全是两门语言。c++是一种提供多种开发范式的面向对象的语言，而c语言仅仅是面向过程的语言。用c++来解决问题，可以优雅的将问题抽象成各种实体部件，相互配合“合力”将问题解决。用c来解决问题，总是将大的过程分解成小的阶段或小的过程，把各阶段或小的过程结果汇总最后将问题解决。最后，如果面试官用这个问题来问应届生，可能意义不大，没有写过足够量代码的程序员，确实无法将这个问题讲清楚。ps：题主如果一定想体验一个c++与c的不同，可以去翻翻《c++设计新思维》这本书。


-------------------------answer 6 via  -------------------------


我认为，一个是在裸奔，一个是在穿着皇帝的新衣裸奔。。。


-------------------------answer 7 via  -------------------------


从编程范式上
C-面向过程
C  -面向过程、面向对象、基于对象、函数式、模板元、泛型
从语法角度
C 模板 类 类型检查 异常 类型推断 重载约等于C


-------------------------answer 8 via  -------------------------


RAII 和 范型前者解放了释放资源的心智负担，后者是编译期的 duck type


-------------------------answer 9 via  -------------------------


C++ 是遵从零簿记原则的多范式语言，包括 C-style part，面向对象，函数式和一个图灵完全的 template 语言。由于零簿记，所以有很多地方迈不开步子，要用一些妥协的方式。其面向对象部分野心很大，不是为了纯 GUI，而我觉得 GUI 是面向对象发挥的最好的地方。当然，如果你想知道 C-style part 和 C 部分的区别，可以读一读《C++ 设计与演化》，能帮你把那些杂碎的语法知识串联起来。
